CREATE DATABASE testingDatabase;

CREATE TABLE testingDatabase.blog (
	id INT NOT NULL auto_increment,
	author_id INT NOT NULL,
	category_id INT NOT NULL,
	title TEXT NOT NULL,
	contents TEXT NOT NULL,
	views INT NOT NULL,
	likes INT NOT NULL,
	creation_date DATE NOT NULL,
	updated_date DATE NOT NULL,
	PRIMARY KEY (id)
);

# Blog Predefined Data
INSERT INTO testingDatabase.blog (author_id, category_id, title, contents, views, likes, creation_date, updated_date)
VALUES (
1,
1,
'Introduction to WordPress Plugin Developments',
'#para In this course, we are going to take a look at everything that goes into building a WordPress plugin. We will start from the ground up by setting up a web server, a database server and PHP. Next, we will install WordPress, and then we will look into some of the sample plugins that are bundled with the software. ##
#para From there, we will move on to examining the event-driven design pattern and how it factors into creating a WordPress plugin, and then we will look at the differences between WordPress actions and WordPress filters. ##
#video ##
#header Introduction ##
#para Currying is a feature found in most modern programming languages. It translates a single function with multiple arguments into a series of functions each with one argument. In essence, this enables for storing functions in variables and creating functions that return functions. ##
#header 1. Function Currying with Classes ##
#para Before defining our own custom functions, I am first going to show you a simple example of currying in Swift using classes. ##
#code ##',
0,
0,
CURTIME(),
CURTIME()
);

INSERT INTO testingDatabase.blog (author_id, category_id, title, contents, views, likes, creation_date, updated_date)
VALUES (1, 1, 'Sample Title','#header this is header ## #para this is paragraph ##',0, 0, CURTIME(), CURTIME());

CREATE TABLE testingDatabase.author (
	id INT NOT NULL auto_increment,
	first_name TEXT NOT NULL,
	last_name TEXT NOT NULL,
	display_name TEXT NOT NULL,
	email TEXT NOT NULL,
	creation_date DATE NOT NULL,
	updated_date DATE NOT NULL,
	PRIMARY KEY (id)
);

# Author Predefined Data
INSERT INTO testingDatabase.author (first_name, last_name, display_name, email, creation_date, updated_date)
VALUES ('James','Kwon','James Kwon', 'hongilkwon841@gmail.com', CURTIME(), CURTIME());

CREATE TABLE testingDatabase.category (
	id INT NOT NULL auto_increment,
	name TEXT NOT NULL,
	display_name TEXT NOT NULL,
	enabled BOOL,
	creation_date DATE NOT NULL,
	updated_date DATE NOT NULL,
	PRIMARY KEY (id)
);

# Category Predefined Data
INSERT INTO testingDatabase.category (name, display_name, enabled, creation_date, updated_date)
VALUES ('JavaCode','Java Code', true, CURTIME(), CURTIME());

CREATE TABLE testingDatabase.tag (
	id INT NOT NULL auto_increment,
	post_id INT NOT NULL,
	name TEXT NOT NULL,
	display_name TEXT NOT NULL,
	creation_date DATE NOT NULL,
	updated_date DATE NOT NULL,
	PRIMARY KEY (id)
);




